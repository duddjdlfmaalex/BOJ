///2573
#include <bits/stdc++.h>
using namespace std;

struct BS{
    int h;
    int r, c;
};

int a[305][305], b[305][305];

queue<BS> Q;

int main()
{
    int n, m, i, j, t = 1, c = 0, flag;
    scanf("%d%d", &n, &m);
    for(i = 0; i < n; i++)
    {
        for(j = 0; j < m; j++)
        {
            scanf("%d", &a[i][j]);
        }
    }

    for(;; t++)
    {
        ///녹인다
        for(i = 0; i < n; i++)
        {
            for(j = 0; j < m; j++)
            {
                if(a[i][j])
                {
                    ///상하좌우 0의 개수
                    c = 0;
                    if(a[i-1][j] == 0)
                    {
                        c++;
                    }
                    if(a[i+1][j] == 0)
                    {
                        c++;
                    }
                    if(a[i][j-1] == 0)
                    {
                        c++;
                    }
                    if(a[i][j+1] == 0)
                    {
                        c++;
                    }
                    b[i][j] = c;
                }
            }
        }
        for(i = 0; i < n; i++)
        {
            for(j = 0; j < m; j++)
            {
                a[i][j] = max(a[i][j] - b[i][j], 0);
            }
        }
        for(i = 0; i < n; i++)
        {
            for(j = 0; j < m; j++)
            {
                b[i][j] = 0;
            }
        }


        ///분리확인
        flag = 0;
        for(i = 0; i < n; i++)
        {
            for(j = 0; j < m; j++)
            {
                if(a[i][j])
                {
                    Q.push({a[i][j], i, j});
                    b[i][j] = 1;
                    flag = 1;
                    break;
                }
            }
            if(flag == 1)
            {
                break;
            }

        }
        if(!flag)
        {
            puts("0");
            return 0;
        }



        while(!Q.empty())
        {
            BS bs = Q.front();
            Q.pop();
            ///bs의 상하좌우 덩어리 조사
            if(a[bs.r-1][bs.c] && !b[bs.r-1][bs.c])
            {
                Q.push({a[bs.r-1][bs.c], bs.r-1, bs.c});
                b[bs.r-1][bs.c] = 1;
            }

            if(a[bs.r+1][bs.c] && !b[bs.r+1][bs.c])
            {
                Q.push({a[bs.r+1][bs.c], bs.r+1, bs.c});
                b[bs.r+1][bs.c] = 1;
            }

            if(a[bs.r][bs.c-1] && !b[bs.r][bs.c-1])
            {
                Q.push({a[bs.r][bs.c-1], bs.r, bs.c-1});
                b[bs.r][bs.c-1] = 1;
            }

            if(a[bs.r][bs.c+1] && !b[bs.r][bs.c+1])
            {
                Q.push({a[bs.r][bs.c+1], bs.r, bs.c+1});
                b[bs.r][bs.c+1] = 1;
            }


        }

        for(i = 0; i < n; i++)
        {
            for(j = 0; j < m; j++)
            {
                if(a[i][j] && !b[i][j])
                {
                    printf("%d", t);
                    return 0;
                }
            }
        }

        for(i = 0; i < n; i++)
        {
            for(j = 0; j < m; j++)
            {
                b[i][j] = 0;
            }
        }


    }







    return 0;
}
